# -*- coding: utf-8 -*-
"""
Created on Fri Mar 15 20:12:22 2019

@author: Nicole
"""

import pandas as pd

#%%Energy generation from PVs

# Class to import data from PVGIS csv file
# Selected column provides irradiance data (kW/m) for one panel

class PVasset():
    """
    PV asset class
    
    Input
    -----
    Capacity : float
        PV capacity, kW.
    """
    def __init__(self,capacity):
        self.capacity = capacity
        self.asset_type = 'PV'
        super().__init__()
        
    def getOutput(self, dt):
        """
        Return PV output
        
        Input
        -----
        dt : float
            Time interval (hours)
            
        Returns
        -------
        PV output : numpy array
        """
        df = pd.read_csv('PVGIS_alibabapanel.csv', usecols=[11])
        solar = df.values
        output = solar * self.capacity * dt
        self.output = output
        return output
    
    
##%% Load averaged hourly data over a year
#        
#''' Fixed parameters '''
#
#pv_area = 1.956*0.992 #area of one panel        
#    
#''' Variables '''
#
#dt = 60/60 #time period (hr)
#
#pv_efficiency = 0.18 #efficiency of one panel (max 0.18, degrades with time)
#
#pv_losses = 0.14 #losses from wires/inverters/etc; 0.14 recommended by PVGIS
#
#pv_number = 4995 #total number of panels (max 4995, given 15 panels per 3-bay unit, 1000 bays total)    
#
#pv_capacity = pv_efficiency*pv_area #at max efficiency this is 0.35kW as manufacturer states
#
#pv_site1 = PVasset(pv_capacity*pv_number*(1-pv_losses)) #energy generated by all installed panels
#
#solar_profile = pv_site1.getOutput(dt)
#
## Plot solar profile
#
#import matplotlib.pyplot as plt
#
#plt.plot(solar_profile)
#plt.title('Energy generation')
#plt.xlabel('Time of year (hours)')
#plt.ylabel('Energy (kWh)')


#%% Average hourly generation for each month of the year
"""
''' Used in total_x_kWh txt files '''

print('Average hourly generation on a day in January')
jan = solar_profile[:744] # 24*31 = 744 (no. values of solar_profile that correspond to Jan)
for i in range(24):
    print(float(sum(jan[i::24])/31))

print('Average hourly generation on a day in February')
feb = solar_profile[744:1416]
for i in range(24):
    print(float(sum(feb[i::24])/28))
    
print('Average hourly generation on a day in March')
mar = solar_profile[1416:2160]
for i in range(24):
    print(float(sum(mar[i::24])/31))

print('Average hourly generation on a day in April')
apr = solar_profile[2160:2880]
for i in range(24):
    print(float(sum(apr[i::24])/30))
    
print('Average hourly generation on a day in May')
may = solar_profile[2880:3624]
for i in range(24):
    print(float(sum(may[i::24])/31))
    
print('Average hourly generation on a day in June')
jun = solar_profile[3624:4344]
for i in range(24):
    print(float(sum(jun[i::24])/30))
    
print('Average hourly generation on a day in July')
jul = solar_profile[4344:5088]
for i in range(24):
    print(float(sum(jul[i::24])/31))
    
print('Average hourly generation on a day in August')
aug = solar_profile[5088:5832]
for i in range(24):
    print(float(sum(aug[i::24])/31))
    
print('Average hourly generation on a day in September')
sep = solar_profile[5832:6552]
for i in range(24):
    print(float(sum(sep[i::24])/30))
    
print('Average hourly generation on a day in October')
oct = solar_profile[6552:7296]
for i in range(24):
    print(float(sum(oct[i::24])/31))
    
print('Average hourly generation on a day in November')
nov = solar_profile[7296:8016]
for i in range(24):
    print(float(sum(nov[i::24])/30))
    
print('Average hourly generation on a day in December')
dec = solar_profile[8016:8760]
for i in range(24):
    print(float(sum(dec[i::24])/31))
"""